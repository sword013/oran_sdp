#!/usr/bin/env python3

import argparse
import signal
import time
import threading
from ricxappframe.xapp_frame import Xapp
from ricxappframe.xapp_subscribe import NewSubscriber

class E2SubscriptionTester(Xapp):
    def __init__(self, config_file=None):
        super().__init__(config_file, rmr_port=4560)
        self.subscription_count = 0
        self.active_subscriptions = []
        self.subscriber = NewSubscriber("http://submgr:8080")
        
    def subscription_callback(self, summary, sbid):
        """Callback function for subscription responses"""
        print(f"Subscription response received: {summary}, ID: {sbid}")
        if summary.get('subscriptionInstances'):
            for instance in summary['subscriptionInstances']:
                if instance.get('subscriptionId'):
                    self.active_subscriptions.append(instance['subscriptionId'])
    
    def create_kmp_subscription_request(self, e2_node_id, report_period=1000):
        """Create E2SM-KMP subscription request payload"""
        subscription_detail = {
            "subscriptionId": f"sub_{self.subscription_count}",
            "actionToBeSetupList": [{
                "actionId": 1,
                "actionType": "report",
                "actionDefinition": {
                    "reportingPeriod": report_period,
                    "reportingFormat": 1
                },
                "subsequentAction": {
                    "subsequentActionType": "continue",
                    "timeToWait": "w1s"
                }
            }]
        }
        
        subscription_request = {
            "subscriptionId": f"test_sub_{self.subscription_count}",
            "clientEndpoint": {
                "host": "localhost",
                "httpPort": 8088,
                "rmrPort": 4560
            },
            "meid": e2_node_id,
            "ranFunctionId": 2,  # KPM RAN Function ID
            "subscriptionDetails": [subscription_detail]
        }
        
        self.subscription_count += 1
        return subscription_request

    def send_subscription_requests(self, e2_node_id, num_requests=10, delay=0.1):
        """Send multiple subscription requests with configurable delay"""
        print(f"Sending {num_requests} subscription requests to {e2_node_id}")
        
        for i in range(num_requests):
            try:
                request = self.create_kmp_subscription_request(e2_node_id)
                summary, reason, status = self.subscriber.subscribe(
                    request, 
                    self.subscription_callback
                )
                
                print(f"Request {i+1}: Status={status}, Reason={reason}")
                
                if delay > 0:
                    time.sleep(delay)
                    
            except Exception as e:
                print(f"Error sending subscription {i+1}: {str(e)}")
                
        print(f"Completed sending {num_requests} requests")
        print(f"Active subscriptions: {len(self.active_subscriptions)}")

    def stress_test_subscriptions(self, e2_node_id, burst_size=50, num_bursts=5, burst_delay=1.0):
        """Perform stress testing with burst subscription requests"""
        print(f"Starting stress test: {num_bursts} bursts of {burst_size} requests each")
        
        for burst in range(num_bursts):
            print(f"\nBurst {burst + 1}/{num_bursts}")
            
            # Send burst of requests with minimal delay
            threads = []
            for i in range(burst_size):
                thread = threading.Thread(
                    target=self._send_single_request,
                    args=(e2_node_id, f"burst_{burst}_req_{i}")
                )
                threads.append(thread)
                thread.start()
            
            # Wait for all threads to complete
            for thread in threads:
                thread.join()
                
            print(f"Burst {burst + 1} completed. Waiting {burst_delay}s before next burst...")
            time.sleep(burst_delay)
            
        print("Stress test completed")

    def _send_single_request(self, e2_node_id, request_id):
        """Send a single subscription request (thread-safe)"""
        try:
            request = self.create_kmp_subscription_request(e2_node_id)
            request['subscriptionId'] = request_id
            
            summary, reason, status = self.subscriber.subscribe(
                request, 
                self.subscription_callback
            )
            
        except Exception as e:
            print(f"Error in thread {request_id}: {str(e)}")

    def cleanup_subscriptions(self):
        """Clean up all active subscriptions"""
        print("Cleaning up active subscriptions...")
        for sub_id in self.active_subscriptions:
            try:
                self.subscriber.unsubscribe(sub_id)
                print(f"Unsubscribed from {sub_id}")
            except Exception as e:
                print(f"Error unsubscribing from {sub_id}: {str(e)}")
        
        self.active_subscriptions.clear()

    def signal_handler(self, signum, frame):
        """Handle shutdown signals"""
        print("Received shutdown signal. Cleaning up...")
        self.cleanup_subscriptions()
        super().signal_handler(signum, frame)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='E2 Subscription Tester xApp')
    parser.add_argument('--e2-node-id', type=str, default='gnbd_001_001_00019b_0',
                       help='E2 Node ID to send subscriptions to')
    parser.add_argument('--num-requests', type=int, default=10,
                       help='Number of subscription requests to send')
    parser.add_argument('--delay', type=float, default=0.1,
                       help='Delay between requests in seconds')
    parser.add_argument('--stress-test', action='store_true',
                       help='Run stress test with burst requests')
    parser.add_argument('--burst-size', type=int, default=50,
                       help='Number of requests per burst in stress test')
    parser.add_argument('--num-bursts', type=int, default=5,
                       help='Number of bursts in stress test')
    
    args = parser.parse_args()
    
    # Create and configure the xApp
    xapp = E2SubscriptionTester()
    
    # Set up signal handlers
    signal.signal(signal.SIGTERM, xapp.signal_handler)
    signal.signal(signal.SIGINT, xapp.signal_handler)
    
    try:
        if args.stress_test:
            xapp.stress_test_subscriptions(
                args.e2_node_id, 
                args.burst_size, 
                args.num_bursts
            )
        else:
            xapp.send_subscription_requests(
                args.e2_node_id, 
                args.num_requests, 
                args.delay
            )
            
        # Keep the application running to handle responses
        print("xApp running. Press Ctrl+C to stop...")
        xapp.run()
        
    except KeyboardInterrupt:
        print("Application interrupted by user")
    finally:
        xapp.cleanup_subscriptions()
