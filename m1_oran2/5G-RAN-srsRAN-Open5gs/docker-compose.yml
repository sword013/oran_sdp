#
# Copyright 2021-2025 Software Radio Systems Limited
#
# This file is part of srsRAN
#
# srsRAN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# srsRAN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# A copy of the GNU Affero General Public License can be found in
# the LICENSE file in the top-level directory of this distribution
# and at http://www.gnu.org/licenses/.
#

services:
  5gc:
    stdin_open: true
    tty: true
    container_name: open5gs_5gc
    image: akhil15935/open5gs-5gc:latest
    build:
      context: ./open5gs
      args:
        OS_VERSION: "22.04"
        OPEN5GS_VERSION: "v2.7.0"
    env_file:
      - ${OPEN_5GS_ENV_FILE:-open5gs/open5gs.env}
    volumes:
      - ./open5gs/subscribers.csv:/open5gs/subscribers.csv
    privileged: true
    ports:
      - "9999:9999/tcp"
    # Uncomment port to use the 5gc from outside the docker network
    #  - "38412:38412/sctp"
    #  - "2152:2152/udp"
    command: 5gc -c open5gs-5gc.yml
    healthcheck:
      test: [ "CMD-SHELL", "nc -z 127.0.0.20 7777" ]
      interval: 3s
      timeout: 1s
      retries: 60
    networks:
      ran:
        ipv4_address: ${OPEN5GS_IP:-10.53.1.2}

  cu0:
    stdin_open: true
    tty: true
    container_name: srsran_cu_0
    image: akhil15935/gnb:split_8
    privileged: true
    cap_add:
      - SYS_RESOURCE
      - SYS_NICE
      - NET_ADMIN
      - CAP_SYS_PTRACE
    volumes:
      # Access USB to use some SDRs
      - /dev/bus/usb/:/dev/bus/usb/
      # Sharing images between the host and the pod.
      # It's also possible to download the images inside the pod
      - /usr/share/uhd/images:/usr/share/uhd/images
      # Save logs and more into gnb-storage
      - gnb-storage:/tmp
      - ./configs/cu:/configs
      - ./logs/cu0_logs:/tmp
    networks:
      ran:
        ipv4_address: ${GNB_IP:-10.53.1.4}
      oran-sc-ric_ric_network:
        ipv4_address: 10.0.2.30
      ue:
        ipv4_address: 10.53.10.4
      metrics:
        ipv4_address: 10.53.2.7
    # Start GNB container after 5gc is up and running
    depends_on:
      5gc:
        condition: service_healthy
   # Command to run into the final container
    command: srscu -c /configs/cu0_config.yml
  cu1:
    stdin_open: true
    tty: true
    container_name: srsran_cu_1
    image: akhil15935/gnb:split_8
    privileged: true
    cap_add:
      - SYS_RESOURCE
      - SYS_NICE
      - NET_ADMIN
      - CAP_SYS_PTRACE
    volumes:
      # Access USB to use some SDRs
      - /dev/bus/usb/:/dev/bus/usb/
      # Sharing images between the host and the pod.
      # It's also possible to download the images inside the pod
      - /usr/share/uhd/images:/usr/share/uhd/images
      # Save logs and more into gnb-storage
      - gnb-storage:/tmp
      - ./configs/cu:/configs
      - ./logs/cu1_logs:/tmp
    networks:
      oran-sc-ric_ric_network:
        ipv4_address: 10.0.2.31
      ran:
        ipv4_address: ${GNB_IP:-10.53.1.5}
      ue:
        ipv4_address: 10.53.10.5
      metrics:
        ipv4_address: 10.53.2.8
    # Start GNB container after 5gc is up and running
    depends_on:
      5gc:
        condition: service_healthy
   # Command to run into the final container
    command: srscu -c /configs/cu1_config.yml
  
  cu2:
    stdin_open: true
    tty: true
    container_name: srsran_cu_2
    image: akhil15935/gnb:split_8
    privileged: true
    cap_add:
      - SYS_RESOURCE
      - SYS_NICE
      - NET_ADMIN
      - CAP_SYS_PTRACE
    volumes:
      # Access USB to use some SDRs
      - /dev/bus/usb/:/dev/bus/usb/
      # Sharing images between the host and the pod.
      # It's also possible to download the images inside the pod
      - /usr/share/uhd/images:/usr/share/uhd/images
      # Save logs and more into gnb-storage
      - gnb-storage:/tmp
      - ./configs/cu:/configs
      - ./logs/cu2_logs:/tmp
    networks:
      oran-sc-ric_ric_network:
        ipv4_address: 10.0.2.32
      ran:
        ipv4_address: ${GNB_IP:-10.53.1.6}
      ue:
        ipv4_address: 10.53.10.6
      metrics:
        ipv4_address: 10.53.2.9
    # Start GNB container after 5gc is up and running
    depends_on:
      5gc:
        condition: service_healthy
   # Command to run into the final container
    command: srscu -c /configs/cu2_config.yml
  
  cu3:
    stdin_open: true
    tty: true
    container_name: srsran_cu_3
    image: akhil15935/gnb:split_8
    privileged: true
    cap_add:
      - SYS_RESOURCE
      - SYS_NICE
      - NET_ADMIN
      - CAP_SYS_PTRACE
    volumes:
      # Access USB to use some SDRs
      - /dev/bus/usb/:/dev/bus/usb/
      # Sharing images between the host and the pod.
      # It's also possible to download the images inside the pod
      - /usr/share/uhd/images:/usr/share/uhd/images
      # Save logs and more into gnb-storage
      - gnb-storage:/tmp
      - ./configs/cu:/configs
      - ./logs/cu3_logs:/tmp
    networks:
      oran-sc-ric_ric_network:
        ipv4_address: 10.0.2.33
      ran:
        ipv4_address: ${GNB_IP:-10.53.1.7}
      ue:
        ipv4_address: 10.53.10.7
      metrics:
        ipv4_address: 10.53.2.10
    # Start GNB container after 5gc is up and running
    depends_on:
      5gc:
        condition: service_healthy
   # Command to run into the final container
    command: srscu -c /configs/cu3_config.yml
  # cu0_gnuradio:
  #   stdin_open: true
  #   tty: true
  #   container_name: srsran_cu_0_gnuradio
  #   image: akhil15935/gnb:split_8
  #   privileged: true
  #   cap_add:
  #     - SYS_RESOURCE
  #     - SYS_NICE
  #     - NET_ADMIN
  #     - CAP_SYS_PTRACE
  #   volumes:
  #     # Access USB to use some SDRs
  #     - /dev/bus/usb/:/dev/bus/usb/
  #     # Sharing images between the host and the pod.
  #     # It's also possible to download the images inside the pod
  #     - /usr/share/uhd/images:/usr/share/uhd/images
  #     # Save logs and more into gnb-storage
  #     - gnb-storage:/tmp
  #     - ./configs/cu:/configs
  #     - ./logs/cu0_logs:/tmp
  #   networks:
  #     ran:
  #       ipv4_address: ${GNB_IP:-10.53.1.8}
  #     ue:
  #       ipv4_address: 10.53.10.8
  #     metrics:
  #       ipv4_address: 10.53.2.11
  #   # Start GNB container after 5gc is up and running
  #   depends_on:
  #     5gc:
  #       condition: service_healthy
  #  # Command to run into the final container
  #   command: srscu -c /configs/cu0_config_gnuradio.yml
  du0:
    stdin_open: true
    tty: true
    container_name: srsran_du_0
    image: akhil15935/gnb:split_8
    privileged: true
    cap_add:
      - SYS_RESOURCE
      - NET_ADMIN
      - SYS_NICE
      - CAP_SYS_PTRACE
    volumes:
      # Access USB to use some SDRs
      - /dev/bus/usb/:/dev/bus/usb/
      # Sharing images between the host and the pod.
      # It's also possible to download the images inside the pod
      - /usr/share/uhd/images:/usr/share/uhd/images
      # Save logs and more into gnb-storage
      - gnb-storage:/tmp
      - ./configs/du:/configs
      - ./logs/du0_logs:/tmp
    networks:
      ran:
        ipv4_address: ${GNB_IP:-10.53.1.15}
      oran-sc-ric_ric_network:
        ipv4_address: 10.0.2.40
      ue:
        ipv4_address: 10.53.10.15
      metrics:
        ipv4_address: 10.53.2.18
    # Start GNB container after 5gc is up and running
    depends_on:
      cu0:
        condition: service_started
      5gc:
        condition: service_healthy
    # Command to run into the final container
    command: srsdu -c /configs/du0_config.yml
    # command: sleep infinity
  du1:
    stdin_open: true
    tty: true
    container_name: srsran_du_1
    image: akhil15935/gnb:split_8
    privileged: true
    cap_add:
      - SYS_RESOURCE
      - NET_ADMIN
      - SYS_NICE
      - CAP_SYS_PTRACE
    volumes:
      # Access USB to use some SDRs
      - /dev/bus/usb/:/dev/bus/usb/
      # Sharing images between the host and the pod.
      # It's also possible to download the images inside the pod
      - /usr/share/uhd/images:/usr/share/uhd/images
      # Save logs and more into gnb-storage
      - gnb-storage:/tmp
      - ./configs/du:/configs
      - ./logs/du1_logs:/tmp
    networks:
      oran-sc-ric_ric_network:
        ipv4_address: 10.0.2.41
      ran:
        ipv4_address: ${GNB_IP:-10.53.1.16}
      ue:
        ipv4_address: 10.53.10.16
      metrics:
        ipv4_address: 10.53.2.19
    # Start GNB container after 5gc is up and running
    depends_on:
      cu1:
        condition: service_started
      5gc:
        condition: service_healthy
    # Command to run into the final container
    command: srsdu -c /configs/du1_config.yml
    # command: sleep infinity

  du2:
    stdin_open: true
    tty: true
    container_name: srsran_du_2
    image: akhil15935/gnb:split_8
    privileged: true
    cap_add:
      - SYS_RESOURCE
      - NET_ADMIN
      - SYS_NICE
      - CAP_SYS_PTRACE
    volumes:
      # Access USB to use some SDRs
      - /dev/bus/usb/:/dev/bus/usb/
      # Sharing images between the host and the pod.
      # It's also possible to download the images inside the pod
      - /usr/share/uhd/images:/usr/share/uhd/images
      # Save logs and more into gnb-storage
      - gnb-storage:/tmp
      - ./configs/du:/configs
      - ./logs/du2_logs:/tmp
    networks:
      oran-sc-ric_ric_network:
        ipv4_address: 10.0.2.42
      ran:
        ipv4_address: ${GNB_IP:-10.53.1.17}
      ue:
        ipv4_address: 10.53.10.17
      metrics:
        ipv4_address: 10.53.2.20
    # Start GNB container after 5gc is up and running
    depends_on:
      cu2:
        condition: service_started
      5gc:
        condition: service_healthy
    # Command to run into the final container
    command: srsdu -c /configs/du2_config.yml
    # command: sleep infinity

  du3:
    stdin_open: true
    tty: true
    container_name: srsran_du_3
    image: akhil15935/gnb:split_8
    privileged: true
    cap_add:
      - SYS_RESOURCE
      - NET_ADMIN
      - SYS_NICE
      - CAP_SYS_PTRACE
    volumes:
      # Access USB to use some SDRs
      - /dev/bus/usb/:/dev/bus/usb/
      # Sharing images between the host and the pod.
      # It's also possible to download the images inside the pod
      - /usr/share/uhd/images:/usr/share/uhd/images
      # Save logs and more into gnb-storage
      - gnb-storage:/tmp
      - ./configs/du:/configs
      - ./logs/du3_logs:/tmp
    networks:
      oran-sc-ric_ric_network:
        ipv4_address: 10.0.2.43
      ran:
        ipv4_address: ${GNB_IP:-10.53.1.18}
      ue:
        ipv4_address: 10.53.10.18
      metrics:
        ipv4_address: 10.53.2.21
    # Start GNB container after 5gc is up and running
    depends_on:
      cu3:
        condition: service_started
      5gc:
        condition: service_healthy
    # Command to run into the final container
    command: srsdu -c /configs/du3_config.yml
    # command: sleep infinity
  # du0_gnuradio:
  #   stdin_open: true
  #   tty: true
  #   container_name: srsran_du_0_gnuradio
  #   image: akhil15935/gnb:split_8
  #   privileged: true
  #   cap_add:
  #     - SYS_RESOURCE
  #     - NET_ADMIN
  #     - SYS_NICE
  #     - CAP_SYS_PTRACE
  #   volumes:
  #     # Access USB to use some SDRs
  #     - /dev/bus/usb/:/dev/bus/usb/
  #     # Sharing images between the host and the pod.
  #     # It's also possible to download the images inside the pod
  #     - /usr/share/uhd/images:/usr/share/uhd/images
  #     # Save logs and more into gnb-storage
  #     - gnb-storage:/tmp
  #     - ./configs/du:/configs
  #     - ./logs/du0_logs:/tmp
  #   networks:
  #     ran:
  #       ipv4_address: ${GNB_IP:-10.53.1.19}
  #     ue:
  #       ipv4_address: 10.53.10.19
  #     metrics:
  #       ipv4_address: 10.53.2.22
  #   # Start GNB container after 5gc is up and running
  #   depends_on:
  #     cu0_gnuradio:
  #       condition: service_started
  #     5gc:
  #       condition: service_healthy
  #   # Command to run into the final container
  #   command: srsdu -c /configs/du0_config_gnuradio.yml
  #   # command: sleep infinity

  gnb:
    stdin_open: true
    tty: true
    container_name: srsran_gnb
    image: akhil15935/gnb:split_8
    # privileged mode is requred only for accessing usb devices
    privileged: true
    # Extra capabilities always required
    cap_add:
      - SYS_RESOURCE
      - SYS_NICE
      - CAP_SYS_PTRACE
    volumes:
      # Access USB to use some SDRs
      - /dev/bus/usb/:/dev/bus/usb/
      # Sharing images between the host and the pod.
      # It's also possible to download the images inside the pod
      - /usr/share/uhd/images:/usr/share/uhd/images
      # Save logs and more into gnb-storage
      - gnb-storage:/tmp
      - ./gnb_config.yml:/gnb_config.yml
      - ./logs:/tmp
    # It creates a file/folder into /config_name inside the container
    # Its content would be the value of the file used to create the config
    configs:
      - gnb_config.yml
    # Customize your desired network mode.
    # current netowrk configuration creastes a private netwoek with both containers attached
    # An alterantive would be `network: host"`. That would expose your host network into the container. It's the easiest to use if the 5gc is not in your PC
    networks:
      ran:
        ipv4_address: ${GNB_IP:-10.53.1.3}
      metrics:
        ipv4_address: 10.53.2.3
    # Start GNB container after 5gc is up and running
    depends_on:
      5gc:
        condition: service_healthy
    # Command to run into the final container
    command: gnb -c /gnb_config.yml 

  srsue:
    stdin_open: true
    tty: true
    image: akhil15935/srsue:split_8
    container_name: ue
    devices:
      - /dev/net/tun
    cap_add:
      - SYS_NICE
      - SYS_RESOURCE
      - NET_ADMIN
    depends_on:
      - gnb
    volumes:
      - /configs/ue:/configs
    environment:
      - LD_LIBRARY_PATH=/srsran/lib/src/phy/rf/
    networks:
      ran:
        ipv4_address: 10.53.1.10
    command: bash -c '/srsran/srsue/src/srsue /configs/ue0.conf & while true; do ping 10.45.1.1; sleep 2; done'
  srsue0:
    stdin_open: true
    tty: true
    image: akhil15935/srsue:split_8
    container_name: ue0
    devices:
      - /dev/net/tun
    cap_add:
      - SYS_NICE
      - SYS_RESOURCE
      - NET_ADMIN
    depends_on:
      - cu0
      - du0
    volumes:
      - ./configs/ue:/configs
    environment:
      - LD_LIBRARY_PATH=/srsran/lib/src/phy/rf/
    networks:
      ue:
        ipv4_address: 10.53.10.20
    command: bash -c '/srsran/srsue/src/srsue /configs/ue0.conf & while true; do ping 10.45.1.1; sleep 2; done'
  srsue1:
    stdin_open: true
    tty: true
    image: akhil15935/srsue:split_8
    container_name: ue1
    devices:
      - /dev/net/tun
    cap_add:
      - SYS_NICE
      - SYS_RESOURCE
      - NET_ADMIN
    depends_on:
      - cu1
      - du1
    volumes:
      - ./configs/ue:/configs
    environment:
      - LD_LIBRARY_PATH=/srsran/lib/src/phy/rf/
    networks:
      ue:
        ipv4_address: 10.53.10.21
    command: bash -c '/srsran/srsue/src/srsue /configs/ue1.conf & while true; do ping 10.45.1.1; sleep 2; done'
  srsue2:
    stdin_open: true
    tty: true
    image: akhil15935/srsue:split_8
    container_name: ue2
    devices:
      - /dev/net/tun
    cap_add:
      - SYS_NICE
      - SYS_RESOURCE
      - NET_ADMIN
    depends_on:
      - cu2
      - du2
    volumes:
      - ./configs/ue:/configs
    environment:
      - LD_LIBRARY_PATH=/srsran/lib/src/phy/rf/
    networks:
      ue:
        ipv4_address: 10.53.10.22
    command: bash -c '/srsran/srsue/src/srsue /configs/ue2.conf & while true; do ping 10.45.1.1; sleep 2; done'
  srsue3:
    stdin_open: true
    tty: true
    image: akhil15935/srsue:split_8
    container_name: ue3
    devices:
      - /dev/net/tun
    cap_add:
      - SYS_NICE
      - SYS_RESOURCE
      - NET_ADMIN
    depends_on:
      - cu3
      - du3
    volumes:
      - ./configs/ue:/configs
    environment:
      - LD_LIBRARY_PATH=/srsran/lib/src/phy/rf/
    networks:
      ue:
        ipv4_address: 10.53.10.23
    command: bash -c '/srsran/srsue/src/srsue /configs/ue3.conf & while true; do ping 10.45.1.1; sleep 2; done'
  # srsue0_gnuradio:
  #   stdin_open: true
  #   tty: true
  #   image: akhil15935/srsue:split_8
  #   container_name: ue0_gnuradio
  #   devices:
  #     - /dev/net/tun
  #   cap_add:
  #     - SYS_NICE
  #     - SYS_RESOURCE
  #     - NET_ADMIN
  #   depends_on:
  #     cu0_gnuradio:
  #       condition: service_started
  #     du0_gnuradio:
  #       condition: service_started
  #   volumes:
  #     - ./configs/ue:/configs
  #   environment:
  #     - LD_LIBRARY_PATH=/srsran/lib/src/phy/rf/
  #   networks:
  #     ue:
  #       ipv4_address: 10.53.10.24
  #   command: bash -c '/srsran/srsue/src/srsue /configs/ue0_gnuradio.conf & while true; do ping 10.45.1.1; sleep 2; done'
  # srsue1_gnuradio:
  #   stdin_open: true
  #   tty: true
  #   image: akhil15935/srsue:split_8
  #   container_name: ue1_gnuradio
  #   devices:
  #     - /dev/net/tun
  #   cap_add:
  #     - SYS_NICE
  #     - SYS_RESOURCE
  #     - NET_ADMIN
  #   depends_on:
  #     cu0_gnuradio:
  #       condition: service_started
  #     du0_gnuradio:
  #       condition: service_started
  #   volumes:
  #     - ./configs/ue:/configs
  #   environment:
  #     - LD_LIBRARY_PATH=/srsran/lib/src/phy/rf/
  #   networks:
  #     ue:
  #       ipv4_address: 10.53.10.25
  #   command: bash -c '/srsran/srsue/src/srsue /configs/ue1_gnuradio.conf & while true; do ping 10.45.1.1; sleep 2; done'
  metrics-server:
    container_name: metrics_server
    image: srsran/metrics_server
    build:
      context: metrics_server
    environment:
      - PORT=${METRICS_SERVER_PORT}
      - BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - TESTBED=default
      - URL=http://${DOCKER_INFLUXDB_INIT_HOST}:${DOCKER_INFLUXDB_INIT_PORT}
      - ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
    ports:
      - 55555:${METRICS_SERVER_PORT}/udp
    networks:
      metrics:
        ipv4_address: 10.53.2.4

  influxdb:
    stdin_open: true
    tty: true
    container_name: influxdb
    image: influxdb:${DOCKER_INFLUXDB_VERSION}
    volumes:
      - influxdb-storage:/var/lib/influxdb2:rw
    env_file:
      - .env
    restart: on-failure:10
    networks:
      metrics:
        ipv4_address: 10.53.2.5

  grafana:
    stdin_open: true
    tty: true
    container_name: grafana
    image: srsran/grafana
    build:
      context: grafana
    volumes:
      - grafana-storage:/var/lib/grafana:rw
    env_file:
      - .env
    depends_on:
      - influxdb
      - metrics-server
    ports:
      - 3300:${GRAFANA_PORT}
    networks:
      metrics:
        ipv4_address: 10.53.2.6

configs:
  gnb_config.yml:
    file: ${GNB_CONFIG_PATH:-../configs/gnb_rf_b200_tdd_n78_20mhz.yml} # Path to your desired config file

volumes:
  gnb-storage:
  grafana-storage:
  influxdb-storage:

networks:
  ran:
    name: ran
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 10.53.1.0/24
  ue:
    name: ue
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 10.53.10.0/24
  metrics:
    name: metrics
    ipam:
      driver: default
      config:
        - subnet: 10.53.2.0/24
  oran-sc-ric_ric_network:
    name: oran-sc-ric_ric_network
    external: true
